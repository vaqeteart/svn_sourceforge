// Class automatically generated by Dev-C++ New Class wizard

#include "myGraph.h" // class's header file

// class constructor
MyGraph::MyGraph()
{
	n = 0;
	Vertex = NULL;
	Edge = NULL;
}
// class destructor
MyGraph::~MyGraph()
{
	int i = 0;
	if(Vertex != NULL)
	{
		delete []Vertex;
		Vertex = NULL;
		for(i = 0; i < n; i ++)
		{
			delete[]Edge[i];// insert your code here
			Edge[i] = NULL;
		}
		delete Edge;
		Edge = NULL;
	}
	n = 0;
}
void MyGraph::readGraph()
{
	int i = 0;
	if(Vertex != NULL)
	{//如果图非空那么读文件之前先释放从前的节点
		delete []Vertex;
		Vertex = NULL;
		for(i = 0; i < n; i ++)
		{
			delete[]Edge[i];// insert your code here
			Edge[i] = NULL;
		}
		delete Edge;
		Edge = NULL;
	}
	n = 0;
	//欠缺和合法性的检查
#if	DEBUGMYGRAPH == 1//调试状态下不用输入，麻烦
	ifstream infile("example.txt");
#else
	char filename[256];
	cout<<"请输入文件名(包含扩展名的txt文件):"<<endl;
	cin>>filename;
	ifstream infile(filename);
#endif
	if(!infile)
	{
		cout<<"文件不存在！请重新输入！";
		return;
	}

//把图初始化
	
	cout<<"开始读取文件..."<<endl;
	infile>>n;//得到图的顶点数
	Vertex = new MyVertex1[n];
	Edge = new MyEdge*[n];
	for(int ed = 0; ed < n; ed++)
	{
		Edge[ed] = new MyEdge[n];
	}
	for(i = 0; i < n; i++)
	{
		Vertex[i].num = i;
		for(int j = 0; j < n; j++)
		{
			Edge[i][j].isVisited = 0;
			Edge[i][j].isE = 0;
			Edge[i][j].cost = 1000000;//无限大
			if(i == j)
			{
				Edge[i][j].cost = 0;
			}
		}
	}

	//开始读取边的信息
	int s,e;
	s = 0;//起点
	e = 0;//终点
	int c = 0;//代价
	while(!infile.eof())
	{
		infile>>s;
		infile>>e;
		infile>>c;
		Vertex[s].k ++;
		Edge[s][e].isE = 1;
		Edge[s][e].isVisited = 0;
		Edge[s][e].cost = c;
	}
	cout<<"读取文件成功！"<<endl;
	infile.close();
}

MyGraph::setGraph(int n)
{
	int i = 0;
	if(Vertex != NULL)
	{//如果图非空那么读文件之前先释放从前的节点
		delete []Vertex;
		Vertex = NULL;
		for(i = 0; i < this->n; i ++)
		{
			delete[]Edge[i];// insert your code here
			Edge[i] = NULL;
		}
		delete Edge;
		Edge = NULL;
	}
	this->n = n; 
	Vertex = new MyVertex1[n];
	Edge = new MyEdge*[n];
	for(int ed = 0; ed < n; ed++)
	{
		Edge[ed] = new MyEdge[n];
	}
	for(i = 0; i < n; i++)
	{
		Vertex[i].num = i;
		for(int j = 0; j < n; j++)
		{
			Edge[i][j].isVisited = 0;
			Edge[i][j].isE = 0;
			Edge[i][j].cost = MAX;//无限大
		}
	}

}